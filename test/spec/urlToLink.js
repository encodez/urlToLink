var urlToLink = new urlToLink();

  describe('URL matching RegEx', function(){

  // See https://mathiasbynens.be/demo/url-regex
  it('should match the URLs', function(){
    expect(urlToLink.parse('http://foo.com/blah_blah')).toBe('<a href="http://foo.com/blah_blah">http://foo.com/blah_blah</a>')
    expect(urlToLink.parse('http://foo.com/blah_blah/')).toBe('<a href="http://foo.com/blah_blah/">http://foo.com/blah_blah/</a>')
    expect(urlToLink.parse('http://foo.com/blah_blah_(wikipedia)')).toBe('<a href="http://foo.com/blah_blah_(wikipedia)">http://foo.com/blah_blah_(wikipedia)</a>')
    expect(urlToLink.parse('http://foo.com/blah_blah_(wikipedia)_(again)')).toBe('<a href="http://foo.com/blah_blah_(wikipedia)_(again)">http://foo.com/blah_blah_(wikipedia)_(again)</a>')
    expect(urlToLink.parse('http://www.example.com/wpstyle/?p=364')).toBe('<a href="http://www.example.com/wpstyle/?p=364">http://www.example.com/wpstyle/?p=364</a>')
    expect(urlToLink.parse('https://www.example.com/foo/?bar=baz&inga=42&quux')).toBe('<a href="https://www.example.com/foo/?bar=baz&inga=42&quux">https://www.example.com/foo/?bar=baz&inga=42&quux</a>')
    expect(urlToLink.parse('http://✪df.ws/123')).toBe('<a href="http://✪df.ws/123">http://✪df.ws/123</a>')
    expect(urlToLink.parse('http://userid:password@example.com:8080')).toBe('<a href="http://userid:password@example.com:8080">http://userid:password@example.com:8080</a>')
    expect(urlToLink.parse('http://userid:password@example.com:8080/')).toBe('<a href="http://userid:password@example.com:8080/">http://userid:password@example.com:8080/</a>')
    expect(urlToLink.parse('http://userid@example.com')).toBe('<a href="http://userid@example.com">http://userid@example.com</a>')
    expect(urlToLink.parse('http://userid@example.com/')).toBe('<a href="http://userid@example.com/">http://userid@example.com/</a>')
    expect(urlToLink.parse('http://userid@example.com:8080')).toBe('<a href="http://userid@example.com:8080">http://userid@example.com:8080</a>')
    expect(urlToLink.parse('http://userid@example.com:8080/')).toBe('<a href="http://userid@example.com:8080/">http://userid@example.com:8080/</a>')
    expect(urlToLink.parse('http://userid:password@example.com')).toBe('<a href="http://userid:password@example.com">http://userid:password@example.com</a>')
    expect(urlToLink.parse('http://userid:password@example.com/')).toBe('<a href="http://userid:password@example.com/">http://userid:password@example.com/</a>')
    expect(urlToLink.parse('http://142.42.1.1/')).toBe('<a href="http://142.42.1.1/">http://142.42.1.1/</a>')
    expect(urlToLink.parse('http://142.42.1.1:8080/')).toBe('<a href="http://142.42.1.1:8080/">http://142.42.1.1:8080/</a>')
    expect(urlToLink.parse('http://➡.ws/䨹')).toBe('<a href="http://➡.ws/䨹">http://➡.ws/䨹</a>')
    expect(urlToLink.parse('http://⌘.ws')).toBe('<a href="http://⌘.ws">http://⌘.ws</a>')
    expect(urlToLink.parse('http://foo.com/blah_(wikipedia)#cite-1')).toBe('<a href="http://foo.com/blah_(wikipedia)#cite-1">http://foo.com/blah_(wikipedia)#cite-1</a>')
    expect(urlToLink.parse('http://foo.com/blah_(wikipedia)_blah#cite-1')).toBe('<a href="http://foo.com/blah_(wikipedia)_blah#cite-1">http://foo.com/blah_(wikipedia)_blah#cite-1</a>')
    expect(urlToLink.parse('http://foo.com/unicode_(✪)_in_parens')).toBe('<a href="http://foo.com/unicode_(✪)_in_parens">http://foo.com/unicode_(✪)_in_parens</a>')
    expect(urlToLink.parse('http://foo.com/(something)?after=parens')).toBe('<a href="http://foo.com/(something)?after=parens">http://foo.com/(something)?after=parens</a>')
    expect(urlToLink.parse('http://☺.damowmow.com/')).toBe('<a href="http://☺.damowmow.com/">http://☺.damowmow.com/</a>')
    expect(urlToLink.parse('http://code.google.com/events/#&product=browser')).toBe('<a href="http://code.google.com/events/#&product=browser">http://code.google.com/events/#&product=browser</a>')
    expect(urlToLink.parse('http://j.mp')).toBe('<a href="http://j.mp">http://j.mp</a>')
    expect(urlToLink.parse('ftp://foo.bar/baz')).toBe('<a href="ftp://foo.bar/baz">ftp://foo.bar/baz</a>')
    expect(urlToLink.parse('http://foo.bar/?q=Test%20URL-encoded%20stuff')).toBe('<a href="http://foo.bar/?q=Test%20URL-encoded%20stuff">http://foo.bar/?q=Test%20URL-encoded%20stuff</a>')
    expect(urlToLink.parse('http://مثال.إختبار')).toBe('<a href="http://مثال.إختبار">http://مثال.إختبار</a>')
    expect(urlToLink.parse('http://例子.测试')).toBe('<a href="http://例子.测试">http://例子.测试</a>')
    expect(urlToLink.parse('http://उदाहरण.परीक्षा')).toBe('<a href="http://उदाहरण.परीक्षा">http://उदाहरण.परीक्षा</a>')
    expect(urlToLink.parse('http://-.~_!$&\'()*+,;=:%40:80%2f::::::@example.com')).toBe('<a href="http://-.~_!$&\'()*+,;=:%40:80%2f::::::@example.com">http://-.~_!$&\'()*+,;=:%40:80%2f::::::@example.com</a>')
    expect(urlToLink.parse('http://1337.net')).toBe('<a href="http://1337.net">http://1337.net</a>')
    expect(urlToLink.parse('http://a.b-c.de')).toBe('<a href="http://a.b-c.de">http://a.b-c.de</a>')
    expect(urlToLink.parse('http://223.255.255.254')).toBe('<a href="http://223.255.255.254">http://223.255.255.254</a>')
  })

  // See https://mathiasbynens.be/demo/url-regex
  it('should not match the URLs', function(){
    expect(urlToLink.parse('http://')).not.toBe('<a href="http://">http://</a>')
    expect(urlToLink.parse('http://.')).not.toBe('<a href="http://.">http://.</a>')
    expect(urlToLink.parse('http://..')).not.toBe('<a href="http://..">http://..</a>')
    expect(urlToLink.parse('http://../')).not.toBe('<a href="http://../">http://../</a>')
    expect(urlToLink.parse('http://?')).not.toBe('<a href="http://?">http://?</a>')
    expect(urlToLink.parse('http://??')).not.toBe('<a href="http://??">http://??</a>')
    expect(urlToLink.parse('http://??/')).not.toBe('<a href="http://??/">http://??/</a>')
    expect(urlToLink.parse('http://#')).not.toBe('<a href="http://#">http://#</a>')
    expect(urlToLink.parse('http://##')).not.toBe('<a href="http://##">http://##</a>')
    expect(urlToLink.parse('http://##/')).not.toBe('<a href="http://##/">http://##/</a>')
    expect(urlToLink.parse('http://foo.bar?q=Spaces should be encoded')).not.toBe('<a href="http://foo.bar?q=Spaces should be encoded">http://foo.bar?q=Spaces should be encoded</a>')
    expect(urlToLink.parse('//')).not.toBe('<a href="//">//</a>')
    expect(urlToLink.parse('//a')).not.toBe('<a href="//a">//a</a>')
    expect(urlToLink.parse('///a')).not.toBe('<a href="///a">///a</a>')
    expect(urlToLink.parse('///')).not.toBe('<a href="///">///</a>')
    expect(urlToLink.parse('http:///a')).not.toBe('<a href="http:///a">http:///a</a>')
    expect(urlToLink.parse('foo.com')).not.toBe('<a href="foo.com">foo.com</a>')
    expect(urlToLink.parse('rdar://1234')).not.toBe('<a href="rdar://1234">rdar://1234</a>')
    expect(urlToLink.parse('h://test')).not.toBe('<a href="h://test">h://test</a>')
    expect(urlToLink.parse('http:// shouldfail.com')).not.toBe('<a href="http:// shouldfail.com">http:// shouldfail.com</a>')
    expect(urlToLink.parse(':// should fail')).not.toBe('<a href=":// should fail">:// should fail</a>')
    expect(urlToLink.parse('http://foo.bar/foo(bar)baz quux')).not.toBe('<a href="http://foo.bar/foo(bar)baz quux">http://foo.bar/foo(bar)baz quux</a>')
    expect(urlToLink.parse('ftps://foo.bar/')).not.toBe('<a href="ftps://foo.bar/">ftps://foo.bar/</a>')
    expect(urlToLink.parse('http://-error-.invalid/')).not.toBe('<a href="http://-error-.invalid/">http://-error-.invalid/</a>')
    expect(urlToLink.parse('http://a.b--c.de/')).not.toBe('<a href="http://a.b--c.de/">http://a.b--c.de/</a>')
    expect(urlToLink.parse('http://-a.b.co')).not.toBe('<a href="http://-a.b.co">http://-a.b.co</a>')
    expect(urlToLink.parse('http://a.b-.co')).not.toBe('<a href="http://a.b-.co">http://a.b-.co</a>')
    expect(urlToLink.parse('http://0.0.0.0')).not.toBe('<a href="http://0.0.0.0">http://0.0.0.0</a>')
    expect(urlToLink.parse('http://10.1.1.0')).not.toBe('<a href="http://10.1.1.0">http://10.1.1.0</a>')
    expect(urlToLink.parse('http://10.1.1.255')).not.toBe('<a href="http://10.1.1.255">http://10.1.1.255</a>')
    expect(urlToLink.parse('http://224.1.1.1')).not.toBe('<a href="http://224.1.1.1">http://224.1.1.1</a>')
    expect(urlToLink.parse('http://1.1.1.1.1')).not.toBe('<a href="http://1.1.1.1.1">http://1.1.1.1.1</a>')
    expect(urlToLink.parse('http://123.123.123')).not.toBe('<a href="http://123.123.123">http://123.123.123</a>')
    expect(urlToLink.parse('http://3628126748')).not.toBe('<a href="http://3628126748">http://3628126748</a>')
    expect(urlToLink.parse('http://.www.foo.bar/')).not.toBe('<a href="http://.www.foo.bar/">http://.www.foo.bar/</a>')
    expect(urlToLink.parse('http://www.foo.bar./')).not.toBe('<a href="http://www.foo.bar./">http://www.foo.bar./</a>')
    expect(urlToLink.parse('http://.www.foo.bar./')).not.toBe('<a href="http://.www.foo.bar./">http://.www.foo.bar./</a>')
    expect(urlToLink.parse('http://10.1.1.1')).not.toBe('<a href="http://10.1.1.1">http://10.1.1.1</a>')
    expect(urlToLink.parse('http://10.1.1.254')).not.toBe('<a href="http://10.1.1.254">http://10.1.1.254</a>')
  })

  it('should match URLs with text', function() {
    expect(urlToLink.parse('This is an example http://example.com')).toBe('This is an example <a href="http://example.com">http://example.com</a>')
  })

  it('should match multiple URLs', function() {
    expect('This text has multiple URLs http://google.com and also http://bing.com').toBe('This text has multiple URLs <a href="http://google.com">http://google.com</a> and also <a href="http://bing.com">http://bing.com</a>')
  })
})
